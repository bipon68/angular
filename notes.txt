- ng new userapi (ng new project_name)
https://github.com/getarrays/usercatalog
- ng g c component/users or ng g c component/users --skip-tests (skip test files)
Create a new component app/component/user

also It's does added this declarations array UsersComponent into app.moduel.ts file. 
Generated automatic. Registering this component in app.module. Angular CLI know that if you generated 
a component then register automatically app.module file

ng g c component/userdetail

### Routing
app.module.ts file

import { AppRoutingModule } from './app-routing.module';

  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
  ],

app-routing.module.ts file

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { UserdetailComponent } from './component/userdetail/userdetail.component';
import { UsersComponent } from './component/users/users.component';

const routes: Routes = [
  { path: 'users', component: UsersComponent },
  { path: 'user/:uuid', component: UserdetailComponent },
  { path: '**', redirectTo: 'users' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

now you are loaded specific content then declare <router-outlet></router-outlet> into app.component.html file

### Random User API

### Application Service
It's to use to fetch data. Services are use to centralized for smimilar functionality. 

ng g s service/user

user.service.ts

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  constructor() { }
}

app.module.ts update for HttpClientModule

import { HttpClientModule } from '@angular/common/http';
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],

Update user.service.ts file

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class UserService {
  private readonly apiUrl: string = 'https://randomuser.me/api';

  constructor(private http: HttpClient) { }

// fetch user
getUsers(size: number = 10): Observable<any>{
  return this.http.get<any>(`${this.apiUrl}/?results=${size}`)
}

// fetch one user using the UUID
getUser(uuid: number = 1): Observable<any>{
  return this.http.get<any>(`${this.apiUrl}/?uuid=${uuid}`)
}

}
### Displaying Fetched Users
users.component.s file
import { UserService } from './../../service/user.service';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {

  constructor(private UserService: UserService) { }

  ngOnInit(): void {
    this.UserService.getUsers(15).subscribe(
        (results: any) => {
          console.log(results)
        }
    );
  }

}

Image from console



### Mapping API Response
  private processResponse(response: Response): Response{
    return{
      info: {...response.info},
      results: response.results.map((user: any) =>(<User>{
        uuid: user.login.uuid,
        firstName: user.name.first,
        lastName: user.name.last,
        email: user.email,
        username: user.login.username,
        gender: user.gender,
        address: `${user.location.street.number} ${user.location.street.name} ${user.location.city} ${user.location.country}`,
        dateOfBirth: user.dob.date,
        phone: user.phone,
        imageUrl: user.picture.medium,
        coordinate: {latitude: +user.location.coordinates.latitude, longitude: +user.location.coordinates.longitude}
      }))
    };
  }

### Mapping Users

// fetch user
  getUsers(size: number = 10): Observable<any>{
    return this.http.get<any>(`${this.apiUrl}/?results=${size}`).pipe(
      map(response => this.processResponse(response))
    )
  }

  // fetch one user using the UUID
  getUser(uuid: number = 1): Observable<any>{
    return this.http.get<any>(`${this.apiUrl}/?uuid=${uuid}`).pipe(
      map(response => this.processResponse(response))
    )
  }

### Bootstrap UI Setup
npm i bootstrap

angular.json file

"styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],
            "scripts": [
              "node_modules/bootstrap/dist/js/bootstrap.min.js"
            ]

